"""
A microsimulation example of clinical staff providing daily care to patients; confounded by
the registration of patients at clinics, the employment of staff at clinics, and the daily
shift schedule of staff.

Note `setindex` is not overloaded because the iterators are immutable, and are intended to
only be populated by the simulation.
"""
module MicroSimulation

"""
    derangement(length)

Uniformly randomly sample a derangement from the set of permutations of size `length`.

# Example
    julia> MicroSimulation.derangement(3)
    3-element Array{Int64,1}:
     2
     3
     1
"""
function derangement(n::Int64)
  a = collect(1:n)
  for i = 1:(n - 1)
    j = a[i] < i < (n - 1) ? rand(i:n) : rand((i + 1):n)
    a[[j, i]] .= a[[i, j]]
  end
  return a
end

"""
    cycle(length)

Uniformly randomly sample a cyclic permutation from the set of permutations of size
`length`.

# Example
    julia> MicroSimulation.cylce(3)
    3-element Array{Int64,1}:
     2
     3
     1
"""
function cycle(n::Int64)
  a = collect(1:n)
  for i = 1:(n - 1)
    j = rand((i + 1):n)
	a[[j, i]] .= a[[i, j]]
  end
  return a
end

"""
    choose(elements, length)

Uniformly randomly choose `elements` number of integers out `1:length` list of integers.

# Example
    julia> MicroSimulation.choose(3, 10)
    3-element Array{Int64,1}:
     4
     1
     9
"""
function choose(n::Int64, m::Int64)
  a = collect(1:m)
  for i = 1:n
    j = rand(i:m)
    a[[i, j]] .= a[[j, i]]
  end
  return a[1:n]
end

"""
    Registration(personidentifier, staffclinic, patientclinic)

A single person in the simulation.

# Fields
- `personidentifier`: identifier of the person.
- `staffclinic`: identifier of the clinic the person provides care.
- `patientclinic`: identifier of the clinic at which the person is a patient.

# Example
    julia> r = MicroSimulation.Registration(1, 2, 3)
    MicroSimulation.Registration(1, 2, 3)
"""
struct Registration
  personidentifier::Int64
  staffclinic::Int64
  patientclinic::Int64
end

Base.start(::Registration) = 1
Base.next(r::Registration, i) = (r[i], i + 1)
Base.done(r::Registration, i) = i > length(r)
Base.length(r::Registration) = endof(r)
Base.getindex(r::Registration, i::Int64) = getfield(r, i)
Base.endof(r::Registration) = 3

"""
    Registrations(personcount, staffcount, cliniccount)

A list of persons generated by incrementally assigning a person identifier, randomly
assigning a clinic identifier from `1:cliniccount` to the first `staffcount` persons, and
randomly assigning a second clinic identifier to every person. The clinic a staff is
employed at will never be the same as the clinic at which the staff is a patient.

# Fields
- `personidentifiers`: identifiers of the people.
- `staffclinics`: identifiers of the clinic the person provides care.
- `patientclinics`: identifiers of the clinic at which the person is a patient.
- `personcount`: number of people.
- `staffcount`: number of clinical staff.
- `cliniccount`: number of clinics employing staff, and caring for patients.

# Example
    julia> rs = MicroSimulation.Registrations(10, 4, 2)
    MicroSimulation.Registrations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 1, 1, 2, 0, 0, 0, 0, 0, 0], [2, 2, 2, 1, 2, 2, 1, 1, 1, 1], 10, 4, 2)
"""
struct Registrations
  personidentifiers::Vector{Int64}
  staffclinics::Vector{Int64}
  patientclinics::Vector{Int64}
  personcount::Int64
  staffcount::Int64
  cliniccount::Int64
  function Registrations(p::Int64, s::Int64, c::Int64)
    cs = zeros(Int64, s)
    cs[1] .= 1
    cs[1 + sort(choose(c - 1, s))] .= 1
    rs = new(
      collect(1:p),
      [cumsum(cs) ; zeros(Int64, p - s)],
      [rand(1:(c - 1), s) ; rand(1:c, p - s)],
      p,
      s,
      c
    )
    rs.patientclinics[rs.staffclinics .== rs.patientclinics] .= c
    return rs
  end
end

Base.start(::Registrations) = 1
Base.next(rs::Registrations, i) = (rs[i], i + 1)
Base.done(rs::Registrations, i) = i > length(rs)
Base.eltype(::Type{Registrations}) = Registration
Base.length(rs::Registrations) = rs.personcount
Base.getindex(rs::Registrations, i) = Registration(
  rs.personidentifiers[i],
  rs.staffclinics[i],
  rs.patientclinics[i]
)
Base.endof(rs::Registrations) = length(rs)

"""
    Clinic(
      clinicidentifier,
      patientcount,
      staffcount,
      dutycount,
      staffstart,
      staffend,
      dutystart,
      dutyend
    )

A single clinic in the simulation.

# Fields
- `clinicidentifier`: identifier of the clinic.
- `patientcount`: number of patients care for by the clinic.
- `staffcount`: number of staff caring for patients at the clinic.
- `dutycount`: number of staff on duty on a single day.
- `staffstart`: first index of staff in list of all staff, sorted by clinic identifier.
- `staffend`: last index of staff in list of all staff, sorted by clinic identifier.
- `dutystart`: first index of staff in list of on duty staff, sorted by clinic identifier.
- `dutyend`: last index of staff in list of on duty staff, sorted by clinic identifier.

# Example
    julia> c = MicroSimulation.Clinic(1, 2, 3, 4, 5, 6, 7, 8)
    MicroSimulation.Clinic(1, 2, 3, 4, 5, 6, 7, 8)
"""
struct Clinic
  clinicidentifier::Int64
  patientcount::Int64
  staffcount::Int64
  dutycount::Int64
  staffstart::Int64
  staffend::Int64
  dutystart::Int64
  dutyend::Int64
end

Base.start(::Clinic) = 1
Base.next(c::Clinic, i) = (c[i], i + 1)
Base.done(c::Clinic, i) = i > length(c)
Base.length(c::Clinic) = endof(c)
Base.getindex(c::Clinic, i::Int64) = getfield(c, i)
Base.endof(c::Clinic) = 8

"""
    Clinics(registrations)

A list of clinics digested from the generated registrations. The daily number of staff on
duty at each clinic is not populated until the simulation is started.

# Fields
- `clinicidentifier`: identifiers of the clinics.
- `patientcount`: numbers of patients cared for by the clinics.
- `staffcount`: numbers of staff caring for patients at the clinics.
- `dutycount`: numbers of staff on duty on a single day.
- `staffstart`: first indices of staff in list of all staff, sorted by clinic identifier.
- `staffend`: last indices of staff in list of all staff, sorted by clinic identifier.
- `dutystart`: first indices of staff in list of on duty staff, sorted by clinic identifier.
- `dutyend`: last indices of staff in list of on duty staff, sorted by clinic identifier.
- `cliniccount`: number of clinics employing staff, and caring for patients.

# Example
    julia> cs = MicroSimulation.Clinics(MicroSimulation.Registrations(10, 4, 2))
    MicroSimulation.Clinics([1, 2], [5, 5], [2, 2], [0, 0], [1, 3], [2, 4], [0, 0], [0, 0], 2)
"""
struct Clinics
  clinicidentifiers::Vector{Int64}
  patientcounts::Vector{Int64}
  staffcounts::Vector{Int64}
  dutycounts::Vector{Int64}
  staffstarts::Vector{Int64}
  staffends::Vector{Int64}
  dutystarts::Vector{Int64}
  dutyends::Vector{Int64}
  cliniccount::Int64
  function Clinics(rs::Registrations)
    cs = new(
      collect(1:rs.cliniccount),
      zeros(Int64, rs.cliniccount),
      zeros(Int64, rs.cliniccount),
      zeros(Int64, rs.cliniccount),
      zeros(Int64, rs.cliniccount),
      zeros(Int64, rs.cliniccount),
      zeros(Int64, rs.cliniccount),
      zeros(Int64, rs.cliniccount),
      rs.cliniccount
    )
    for r in rs
      cs.patientcounts[r.patientclinic] += 1
      if r.staffclinic > 0
        cs.staffcounts[r.staffclinic] += 1
      end
    end
    cs.staffends .= cumsum(cs.staffcounts)
    cs.staffstarts .= [1; cs.staffends[1:end - 1] + 1]
    return cs
  end
end

Base.start(::Clinics) = 1
Base.next(cs::Clinics, i) = (cs[i], i + 1)
Base.done(cs::Clinics, i) = i > length(cs)
Base.eltype(::Type{Clinics}) = Clinic
Base.length(cs::Clinics) = cs.cliniccount
Base.getindex(cs::Clinics, i) = Clinic(
  cs.clinicidentifiers[i],
  cs.patientcounts[i],
  cs.staffcounts[i],
  cs.dutycounts[i],
  cs.staffstarts[i],
  cs.staffends[i],
  cs.dutystarts[i],
  cs.dutyends[i]
)
Base.endof(cs::Clinics) = length(cs)

"""
    Event(day, patientidentifier, staffidentifier)

A single patient visit event in the simulation.

# Fields
- `day`: day of the patient visit event.
- `patientidentifier`: identifier of the patient.
- `staffidentifier`: identifier of the staff caring for the patient.

# Example
    julia> ev = MicroSimulation.Event(Date(2014, 12, 31), 1, 2)
    MicroSimulation.Event(2014-12-31, 1, 2)
"""
struct Event
  day::Date
  patientidentifier::Int64
  staffidentifier::Int64
end

Base.start(::Event) = 1
Base.next(ev::Event, i) = (ev[i], i + 1)
Base.done(ev::Event, i) = i > length(ev)
Base.length(ev::Event) = endof(ev)
Base.getindex(ev::Event, i::Int64) = getfield(ev, i)
Base.endof(ev::Event) = 3

"""
    Events(daterange, registrations, expectedvisits, expectedload)

A list of events stochastically generated by the microsimulation at the time of
instantiation of the object. The process is parametertized by `expectedvisits`, the mean
expected number of clinic visits a single person will have in the `daterange`, and by
`expectedload` the expected number of patients a single clinician can attend to in a single
day. These parameters are used to calculate the number of staff that are rostered on a
single day.

# Fields
- `days`: days of the patient visits.
- `patientidentifiers`: identifiers of the patients.
- `staffidentifiers`: identifiers of the staff caring for the patients.

# Example
    julia> es = MicroSimulation.Events(Date(2014, 01, 01):Date(2014, 12, 31), MicroSimulation.Registrations(400, 10, 2), 4, 28)
    MicroSimulation.Events(Date[2014-01-01, 2014-01-01, 2014-01-01, 2014-01-01, 2014-01-01, 2014-01-02, 2014-01-02, 2014-01-02, 2014-01-02, 2014-01-03  â€¦  2014-12-29, 2014-12-30, 2014-12-30, 2014-12-30, 2014-12-30, 2014-12-31, 2014-12-31, 2014-12-31, 2014-12-31, 2014-12-31], [47, 78, 188, 267, 298, 286, 302, 387, 395, 13  â€¦  365, 3, 56, 121, 232, 5, 35, 187, 224, 252], [5, 5, 6, 6, 5, 7, 7, 7, 7, 6  â€¦  9, 7, 7, 7, 1, 6, 8, 6, 8, 6])
"""
struct Events
  days::Vector{Date}
  patientidentifiers::Vector{Int64}
  staffidentifiers::Vector{Int64}
  function Events(
    ds::StepRange{Date,Base.Dates.Day},
    rs::Registrations,
    mv::Int64,
    ml::Int64
  )
    cs = Clinics(rs)
    cs.dutycounts .= min.(
      ceil.(Int64, (mv .* cs.patientcounts) ./ (ml .* length(ds))),
      cs.staffcounts
    )
    cs.dutyends .= cumsum(cs.dutycounts)
    cs.dutystarts .= [1; cs.dutyends[1:end - 1] + 1]
    roster = sortperm(rs.staffclinics[1:rs.staffcount])
    onduty = zeros(Int64, sum(cs.dutycounts))
    probability = mv / length(ds)
    es = new(Vector{Int64}(), Vector{Int64}(), Vector{Int64}())
    for d in ds
      for c in cs
        onduty[c.dutystart:c.dutyend] .= rand(roster[c.staffstart:c.staffend], c.dutycount)
      end
      for r in rs
        if probability > rand()
          push!(es.days, d)
          push!(es.patientidentifiers, r.personidentifier)
          push!(es.staffidentifiers, rand(onduty[cs.dutystarts[r.patientclinic]:cs.dutyends[r.patientclinic]]))
        end
      end
    end
    return es
  end
end

Base.start(::Events) = 1
Base.next(es::Events, i) = (es[i], i + 1)
Base.done(es::Events, i) = i > length(es)
Base.eltype(::Type{Events}) = Event
Base.length(es::Events) = length(es.days)
Base.getindex(es::Events, i) = Event(
  es.days[i],
  es.patientidentifiers[i],
  es.staffidentifiers[i]
)
Base.endof(es::Events) = length(es)

end
